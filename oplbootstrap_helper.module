<?php
/**
 * @file
 * Code for the OPL Bootstrap Theme Helper Module feature.
 */

include_once 'oplbootstrap_helper.features.inc';


/**
 * Implements hook_ctools_plugin_directory()
 */
function oplbootstrap_helper_ctools_plugin_directory($module, $plugin) {
  if ($module == "panels" && in_array($plugin, array('layouts', 'styles'))) {
    return "plugins/$plugin";
  }

  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function oplbootstrap_helper_block_info() {
  $blocks['footer_library_card'] = array(
    'info' => t('Footer Library Card'),
  );

  $blocks['share_event_blog'] = array(
    'info' => t('Share event and blog links'),
  );

  $blocks['my_biblio_status'] = array(
      'info' => t('Bibliocommons account widget'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function oplbootstrap_helper_block_view($delta = '') {

  $theme_name = 'oplbootstrap';
  $alt_text = 'the-card';
  $image_width = '200';
  $image_height = '143';
  $image_class = 'the-class-name';
  $image_id = 'the-id';
  $block = array();

  switch ($delta) {
    case 'footer_library_card':
      $block['content'] = theme('image', array(
        'path' => drupal_get_path('theme', $theme_name) . '/images/the-card.png',
        'alt' => $alt_text,
        'width' => $image_width,
        'height' => $image_height,
        'attributes' => array(
          'class' => array(
            $image_class,
          ),
          'id' => $image_id,
        )
      ));
    break; 
    
    case 'share_event_blog':
      $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
      $link = url($path, array('absolute' => TRUE));

      $block['content'] = '<div class="the-social"><div class="social-media"><a class="sprite facebookshare" href="https://www.facebook.com/sharer/sharer.php?u=' . $link . '">Facebook</a><a class="sprite googleshare" href="https://plus.google.com/share?url==' . $link . '">Google</a><a class="sprite twittershare" href="https://twitter.com/home?status=' . $link . '">Twitter</a></div></div>';
    break;

    case 'my_biblio_status':
      drupal_add_js('(function ($){var e=document.createElement("script");e.src="https://ottawa.bibliocommons.com/javascripts/sdk.js";e.async=true;var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}(jQuery))', array('type' => 'inline', 'scope'=>'footer', 'weight' => 5));

      $block['content'] = '<div class="bc-widget bc-account-widget" style="height:500px"></div>';
      break;

  }
  return $block;
}


/**
 * Implements hook_block_view_alter().
 */
function oplbootstrap_helper_block_view_alter(&$data, $block) {
  switch ($block->bid) {
    case 'menu-menu-my-opl-menu':

    $menulinks = array();

    foreach ($data['content'] as $key => $value) {
      $menulinks[$key] = $value;
      unset($data['content'][$key]);
    }

    $data['content']['menulinks'] = $menulinks;

    // Remove logout for anonymous users
    foreach ($menulinks as $key => $value) {
      if (user_is_anonymous()) {
        switch ($key) {
          case 97053 :
            unset($data['content']['menulinks'][$key]);
            break;
          case 97058 :
            unset($data['content']['menulinks'][$key]);
            break;
          }
        }
      }

    $buttontext = t('Log In / My OPL');

    if(user_is_logged_in()){
      $buttontext = t('My OPL');
    }

    $oplbutton = array(
      'oplink' => array(
        '#markup' => '<button type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">'. $buttontext . ' <i class="fa fa-angle-down" aria-hidden="true"></i></button>',
      ),
    );

    array_unshift($data['content'],$oplbutton);

    break;

    case 'menu-menu-user-account-page':
      global $user;
      $uid = $user->uid;
      if (arg(0) == 'user' && (arg(1) <> $uid)) {
        $data['content'] = '';
      }

    break;


  }
}


/**
 * Implements hook_menu_attribute_info().
 */
function oplbootstrap_helper_menu_attribute_info() {
  $info['data-toggle'] = array(
    'label' => t('Data Toggle'),
    //'description' => t('Specifies a unique toggle attribute.'),
  );

  $info['data-target'] = array(
    'label' => t('Data Target'),
    //'description' => t('Specifies a unique toggle attribute.'),
  );

  return $info;
}


/**
 * Implements hook_field_extra_fields().
 */
function oplbootstrap_helper_field_extra_fields() {
  $extra['node']['blog']['display']['author_by'] = array(
    'label' => t('Author By'),
    'description' => t('Display By in front of authors name'),
    'weight' => 0,
  );
  return $extra;
}


/**
 * Implements hook_node_view().
 */
function oplbootstrap_helper_node_view($node, $view_mode, $langcode) {
  // Only show the field for node of article type
  if ($node->type == 'blog') {
    $user_fields = user_load($node->uid);
    $displayname = $user_fields->field_borrower_displayname['und']['0']['value'];

    $node->content['author_by'] = array(
      '#markup' => '<p>'. t('By ') . l( $displayname,  'user/'.$node->uid) . '</p>',
    );
  }
}


/**
*  Implements hook_form_alter()
*/
function oplbootstrap_helper_form_alter(&$form, &$form_state, $form_id)
{ 
  if( ($form['#id'] == "views-exposed-form-staff-blogs-bundle-only-search-api2-page") || ($form['#id'] == "views-exposed-form-clone-of-events-and-programs-facets-events-pane") ){                 
    $form['#attributes'] = array(
      'class' => array('left-hand-menu-search')
    );
  }  
}


/**
*  Implements hook_form_views_exposed_form_alter()
*/
function oplbootstrap_helper_form_views_exposed_form_alter(&$form , &$form_state){
  // Overrides the views exposed form url to be the current one
  // Avoids odd views redirect to views page from an exposed form in block
  $form['#action'] = request_uri();
}